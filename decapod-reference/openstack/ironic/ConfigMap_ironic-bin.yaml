# Source: ironic/templates/configmap-bin.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ironic-bin
data:
  manage-cleaning-network.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
    if ! openstack network show ${neutron_network_name}; then
      IRONIC_NEUTRON_CLEANING_NET_ID=$(openstack network create -f value -c id \
        --share \
        --provider-network-type flat \
        --provider-physical-network ${neutron_provider_network} \
        ${neutron_network_name})
    else
      IRONIC_NEUTRON_CLEANING_NET_ID=$(openstack network show ${neutron_network_name} -f value -c id)
    fi
    
    for SUBNET in $(openstack network show $IRONIC_NEUTRON_CLEANING_NET_ID -f value -c subnets); do
      CURRENT_SUBNET=$(openstack subnet show $SUBNET -f value -c name)
      if [ "x${CURRENT_SUBNET}" == "x${neutron_subnet_name}" ]; then
        openstack subnet show ${neutron_subnet_name}
        SUBNET_EXISTS=true
      fi
    done
    
    if [ "x${SUBNET_EXISTS}" != "xtrue" ]; then
      openstack subnet create \
        --gateway ${neutron_subnet_gateway%/*} \
        --allocation-pool start=${neutron_subnet_alloc_start},end=${neutron_subnet_alloc_end} \
        --dns-nameserver ${neutron_subnet_dns_nameserver} \
        --subnet-range ${neutron_subnet_cidr} \
        --network ${neutron_network_name} \
        ${neutron_subnet_name}
    fi
    
  retreive-cleaning-network.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
    IRONIC_NEUTRON_CLEANING_NET_ID=$(openstack network show ${neutron_network_name} -f value -c id)
    tee /tmp/pod-shared/cleaning-network.conf <<EOF
    [neutron]
    cleaning_network_uuid = ${IRONIC_NEUTRON_CLEANING_NET_ID}
    EOF
    
  retreive-swift-config.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
    OS_SWIFT_ENDPOINT="$(openstack endpoint list \
        --service swift \
        --interface public \
        -f value \
        -c URL | head -1 )"
    OS_SWIFT_HOST_AND_PATH_PREFIX="$(echo "${OS_SWIFT_ENDPOINT}" | awk -F "/${OS_SWIFT_API_VERSION}" '{ print $1 }')"
    OS_SWIFT_ACCOUNT_PREFIX="$(echo "${OS_SWIFT_ENDPOINT}" | awk -F "/${OS_SWIFT_API_VERSION}/" '{ print $NF }' | awk -F '$' '{ print $1 }')"
    OS_PROJECT_ID="$(openstack project show ${OS_PROJECT_NAME} -f value -c id)"
    OS_SWIFT_ACCOUNT="$(echo "${OS_SWIFT_ACCOUNT_PREFIX}${OS_PROJECT_ID}")"
    
    tee /tmp/pod-shared/swift.conf <<EOF
    [glance]
    swift_endpoint_url: "${OS_SWIFT_HOST_AND_PATH_PREFIX}"
    swift_account: "${OS_SWIFT_ACCOUNT}"
    EOF
    
  db-drop.py: |    
    #!/usr/bin/env python
    
    # Drops db and user for an OpenStack Service:
    # Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain
    # SQLAlchemy strings for the root connection to the database and the one you
    # wish the service to use. Alternatively, you can use an ini formatted config
    # at the location specified by OPENSTACK_CONFIG_FILE, and extract the string
    # from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by
    # OPENSTACK_CONFIG_DB_SECTION.
    
    import os
    import sys
    try:
        import ConfigParser
        PARSER_OPTS = {}
    except ImportError:
        import configparser as ConfigParser
        PARSER_OPTS = {"strict": False}
    import logging
    from sqlalchemy import create_engine
    
    # Create logger, console handler and formatter
    logger = logging.getLogger('OpenStack-Helm DB Drop')
    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # Set the formatter and add the handler
    ch.setFormatter(formatter)
    logger.addHandler(ch)
    
    
    # Get the connection string for the service db root user
    if "ROOT_DB_CONNECTION" in os.environ:
        db_connection = os.environ['ROOT_DB_CONNECTION']
        logger.info('Got DB root connection')
    else:
        logger.critical('environment variable ROOT_DB_CONNECTION not set')
        sys.exit(1)
    
    # Get the connection string for the service db
    if "OPENSTACK_CONFIG_FILE" in os.environ:
        os_conf = os.environ['OPENSTACK_CONFIG_FILE']
        if "OPENSTACK_CONFIG_DB_SECTION" in os.environ:
            os_conf_section = os.environ['OPENSTACK_CONFIG_DB_SECTION']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_SECTION not set')
            sys.exit(1)
        if "OPENSTACK_CONFIG_DB_KEY" in os.environ:
            os_conf_key = os.environ['OPENSTACK_CONFIG_DB_KEY']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_KEY not set')
            sys.exit(1)
        try:
            config = ConfigParser.RawConfigParser(**PARSER_OPTS)
            logger.info("Using {0} as db config source".format(os_conf))
            config.read(os_conf)
            logger.info("Trying to load db config from {0}:{1}".format(
                os_conf_section, os_conf_key))
            user_db_conn = config.get(os_conf_section, os_conf_key)
            logger.info("Got config from {0}".format(os_conf))
        except:
            logger.critical("Tried to load config from {0} but failed.".format(os_conf))
            raise
    elif "DB_CONNECTION" in os.environ:
        user_db_conn = os.environ['DB_CONNECTION']
        logger.info('Got config from DB_CONNECTION env var')
    else:
        logger.critical('Could not get db config, either from config file or env var')
        sys.exit(1)
    
    # Root DB engine
    try:
        root_engine_full = create_engine(db_connection)
        root_user = root_engine_full.url.username
        root_password = root_engine_full.url.password
        drivername = root_engine_full.url.drivername
        host = root_engine_full.url.host
        port = root_engine_full.url.port
        root_engine_url = ''.join([drivername, '://', root_user, ':', root_password, '@', host, ':', str (port)])
        root_engine = create_engine(root_engine_url)
        connection = root_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1} as {2}".format(
            host, port, root_user))
    except:
        logger.critical('Could not connect to database as root user')
        raise
    
    # User DB engine
    try:
        user_engine = create_engine(user_db_conn)
        # Get our user data out of the user_engine
        database = user_engine.url.database
        user = user_engine.url.username
        password = user_engine.url.password
        logger.info('Got user db config')
    except:
        logger.critical('Could not get user database config')
        raise
    
    # Delete DB
    try:
        root_engine.execute("DROP DATABASE IF EXISTS {0}".format(database))
        logger.info("Deleted database {0}".format(database))
    except:
        logger.critical("Could not drop database {0}".format(database))
        raise
    
    # Delete DB User
    try:
        root_engine.execute("DROP USER IF EXISTS {0}".format(user))
        logger.info("Deleted user {0}".format(user))
    except:
        logger.critical("Could not delete user {0}".format(user))
        raise
    
    logger.info('Finished DB Management')
  db-init.py: |    
    #!/usr/bin/env python
    
    # Creates db and user for an OpenStack Service:
    # Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain
    # SQLAlchemy strings for the root connection to the database and the one you
    # wish the service to use. Alternatively, you can use an ini formatted config
    # at the location specified by OPENSTACK_CONFIG_FILE, and extract the string
    # from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by
    # OPENSTACK_CONFIG_DB_SECTION.
    
    import os
    import sys
    try:
        import ConfigParser
        PARSER_OPTS = {}
    except ImportError:
        import configparser as ConfigParser
        PARSER_OPTS = {"strict": False}
    import logging
    from sqlalchemy import create_engine
    
    # Create logger, console handler and formatter
    logger = logging.getLogger('OpenStack-Helm DB Init')
    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # Set the formatter and add the handler
    ch.setFormatter(formatter)
    logger.addHandler(ch)
    
    
    # Get the connection string for the service db root user
    if "ROOT_DB_CONNECTION" in os.environ:
        db_connection = os.environ['ROOT_DB_CONNECTION']
        logger.info('Got DB root connection')
    else:
        logger.critical('environment variable ROOT_DB_CONNECTION not set')
        sys.exit(1)
    
    # Get the connection string for the service db
    if "OPENSTACK_CONFIG_FILE" in os.environ:
        os_conf = os.environ['OPENSTACK_CONFIG_FILE']
        if "OPENSTACK_CONFIG_DB_SECTION" in os.environ:
            os_conf_section = os.environ['OPENSTACK_CONFIG_DB_SECTION']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_SECTION not set')
            sys.exit(1)
        if "OPENSTACK_CONFIG_DB_KEY" in os.environ:
            os_conf_key = os.environ['OPENSTACK_CONFIG_DB_KEY']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_KEY not set')
            sys.exit(1)
        try:
            config = ConfigParser.RawConfigParser(**PARSER_OPTS)
            logger.info("Using {0} as db config source".format(os_conf))
            config.read(os_conf)
            logger.info("Trying to load db config from {0}:{1}".format(
                os_conf_section, os_conf_key))
            user_db_conn = config.get(os_conf_section, os_conf_key)
            logger.info("Got config from {0}".format(os_conf))
        except:
            logger.critical("Tried to load config from {0} but failed.".format(os_conf))
            raise
    elif "DB_CONNECTION" in os.environ:
        user_db_conn = os.environ['DB_CONNECTION']
        logger.info('Got config from DB_CONNECTION env var')
    else:
        logger.critical('Could not get db config, either from config file or env var')
        sys.exit(1)
    
    # Root DB engine
    try:
        root_engine_full = create_engine(db_connection)
        root_user = root_engine_full.url.username
        root_password = root_engine_full.url.password
        drivername = root_engine_full.url.drivername
        host = root_engine_full.url.host
        port = root_engine_full.url.port
        root_engine_url = ''.join([drivername, '://', root_user, ':', root_password, '@', host, ':', str (port)])
        root_engine = create_engine(root_engine_url)
        connection = root_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1} as {2}".format(
            host, port, root_user))
    except:
        logger.critical('Could not connect to database as root user')
        raise
    
    # User DB engine
    try:
        user_engine = create_engine(user_db_conn)
        # Get our user data out of the user_engine
        database = user_engine.url.database
        user = user_engine.url.username
        password = user_engine.url.password
        logger.info('Got user db config')
    except:
        logger.critical('Could not get user database config')
        raise
    
    # Create DB
    try:
        root_engine.execute("CREATE DATABASE IF NOT EXISTS {0}".format(database))
        logger.info("Created database {0}".format(database))
    except:
        logger.critical("Could not create database {0}".format(database))
        raise
    
    # Create DB User
    try:
        root_engine.execute(
            "GRANT ALL ON `{0}`.* TO \'{1}\'@\'%%\' IDENTIFIED BY \'{2}\'".format(
                database, user, password))
        logger.info("Created user {0} for {1}".format(user, database))
    except:
        logger.critical("Could not create user {0} for {1}".format(user, database))
        raise
    
    # Test connection
    try:
        connection = user_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1}/{2} as {3}".format(
            host, port, database, user))
    except:
        logger.critical('Could not connect to database as user')
        raise
    
    logger.info('Finished DB Management')
  db-sync.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
    ironic-dbsync upgrade
    
  ks-service.sh: |    
    #!/bin/bash
    
    # Copyright 2017 Pete Birley
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    # http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    
    set -ex
    
    # Service boilerplate description
    OS_SERVICE_DESC="${OS_REGION_NAME}: ${OS_SERVICE_NAME} (${OS_SERVICE_TYPE}) service"
    
    # Get Service ID if it exists
    unset OS_SERVICE_ID
    OS_SERVICE_ID=$( openstack service list -f csv --quote none | \
                     grep ",${OS_SERVICE_NAME},${OS_SERVICE_TYPE}$" | \
                     sed -e "s/,${OS_SERVICE_NAME},${OS_SERVICE_TYPE}//g" )
    
    # If a Service ID was not found, then create the service
    if [[ -z ${OS_SERVICE_ID} ]]; then
      OS_SERVICE_ID=$(openstack service create -f value -c id \
                      --name="${OS_SERVICE_NAME}" \
                      --description "${OS_SERVICE_DESC}" \
                      --enable \
                      "${OS_SERVICE_TYPE}")
    fi
  ks-endpoints.sh: |    
    #!/bin/bash
    
    # Copyright 2017 Pete Birley
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    # http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    
    set -ex
    
    # Get Service ID
    OS_SERVICE_ID=$( openstack service list -f csv --quote none | \
                      grep ",${OS_SERVICE_NAME},${OS_SERVICE_TYPE}$" | \
                        sed -e "s/,${OS_SERVICE_NAME},${OS_SERVICE_TYPE}//g" )
    
    # Get Endpoint ID if it exists
    OS_ENDPOINT_ID=$( openstack endpoint list  -f csv --quote none | \
                      grep "^[a-z0-9]*,${OS_REGION_NAME},${OS_SERVICE_NAME},${OS_SERVICE_TYPE},True,${OS_SVC_ENDPOINT}," | \
                      awk -F ',' '{ print $1 }' )
    
    # Making sure only a single endpoint exists for a service within a region
    if [ "$(echo $OS_ENDPOINT_ID | wc -w)" -gt "1" ]; then
      echo "More than one endpoint found, cleaning up"
      for ENDPOINT_ID in $OS_ENDPOINT_ID; do
        openstack endpoint delete ${ENDPOINT_ID}
      done
      unset OS_ENDPOINT_ID
    fi
    
    # Determine if Endpoint needs updated
    if [[ ${OS_ENDPOINT_ID} ]]; then
      OS_ENDPOINT_URL_CURRENT=$(openstack endpoint show ${OS_ENDPOINT_ID} -f value -c url)
      if [ "${OS_ENDPOINT_URL_CURRENT}" == "${OS_SERVICE_ENDPOINT}" ]; then
        echo "Endpoints Match: no action required"
        OS_ENDPOINT_UPDATE="False"
      else
        echo "Endpoints Dont Match: removing existing entries"
        openstack endpoint delete ${OS_ENDPOINT_ID}
        OS_ENDPOINT_UPDATE="True"
      fi
    else
      OS_ENDPOINT_UPDATE="True"
    fi
    
    # Update Endpoint if required
    if [[ "${OS_ENDPOINT_UPDATE}" == "True" ]]; then
      OS_ENDPOINT_ID=$( openstack endpoint create -f value -c id \
        --region="${OS_REGION_NAME}" \
        "${OS_SERVICE_ID}" \
        ${OS_SVC_ENDPOINT} \
        "${OS_SERVICE_ENDPOINT}" )
    fi
    
    # Display the Endpoint
    openstack endpoint show ${OS_ENDPOINT_ID}
  ks-user.sh: |    
    #!/bin/bash
    
    # Copyright 2017 Pete Birley
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    # http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    
    set -ex
    
    # Manage project domain
    PROJECT_DOMAIN_ID=$(openstack domain create --or-show --enable -f value -c id \
        --description="Domain for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_PROJECT_DOMAIN_NAME}" \
        "${SERVICE_OS_PROJECT_DOMAIN_NAME}")
    
    # Display project domain
    openstack domain show "${PROJECT_DOMAIN_ID}"
    
    # Manage user project
    USER_PROJECT_DESC="Service Project for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_PROJECT_DOMAIN_NAME}"
    USER_PROJECT_ID=$(openstack project create --or-show --enable -f value -c id \
        --domain="${PROJECT_DOMAIN_ID}" \
        --description="${USER_PROJECT_DESC}" \
        "${SERVICE_OS_PROJECT_NAME}");
    
    # Display project
    openstack project show "${USER_PROJECT_ID}"
    
    # Manage user domain
    USER_DOMAIN_ID=$(openstack domain create --or-show --enable -f value -c id \
        --description="Domain for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_USER_DOMAIN_NAME}" \
        "${SERVICE_OS_USER_DOMAIN_NAME}")
    
    # Display user domain
    openstack domain show "${USER_DOMAIN_ID}"
    
    # Manage user
    USER_DESC="Service User for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_USER_DOMAIN_NAME}/${SERVICE_OS_SERVICE_NAME}"
    USER_ID=$(openstack user create --or-show --enable -f value -c id \
        --domain="${USER_DOMAIN_ID}" \
        --project-domain="${PROJECT_DOMAIN_ID}" \
        --project="${USER_PROJECT_ID}" \
        --description="${USER_DESC}" \
        "${SERVICE_OS_USERNAME}");
    
    # Manage user password (we do this in a seperate step to ensure the password is updated if required)
    set +x
    echo "Setting user password via: openstack user set --password=xxxxxxx ${USER_ID}"
    openstack user set --password="${SERVICE_OS_PASSWORD}" "${USER_ID}"
    set -x
    
    # Display user
    openstack user show "${USER_ID}"
    
    function ks_assign_user_role () {
      # Get user role
      USER_ROLE_ID=$(openstack role create --or-show -f value -c id \
          "${SERVICE_OS_ROLE}");
    
      # Manage user role assignment
      openstack role add \
          --user="${USER_ID}" \
          --user-domain="${USER_DOMAIN_ID}" \
          --project-domain="${PROJECT_DOMAIN_ID}" \
          --project="${USER_PROJECT_ID}" \
          "${USER_ROLE_ID}"
    
      # Display user role assignment
      openstack role assignment list \
          --role="${USER_ROLE_ID}" \
          --user-domain="${USER_DOMAIN_ID}" \
          --user="${USER_ID}"
    }
    
    # Manage user service role
    IFS=','
    for SERVICE_OS_ROLE in ${SERVICE_OS_ROLES}; do
      ks_assign_user_role
    done
    
    # Manage user member role
    : ${MEMBER_OS_ROLE:="member"}
    export USER_ROLE_ID=$(openstack role create --or-show -f value -c id \
        "${MEMBER_OS_ROLE}");
    ks_assign_user_role
  ironic-api.sh: |
    #!/bin/bash
    
    
    
    set -ex
    COMMAND="${@:-start}"
    OPTIONS="${OPTIONS} --config-file /tmp/pod-shared/cleaning-network.conf"
    
    function start () {
      exec ironic-api \
            --config-file /etc/ironic/ironic.conf \
            ${OPTIONS}
    }
    
    function stop () {
      kill -TERM 1
    }
    
    $COMMAND
    
  ironic-conductor.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
    mkdir -p /var/lib/openstack-helm/ironic/images
    mkdir -p /var/lib/openstack-helm/ironic/master_images
    OPTIONS="${OPTIONS} --config-file /tmp/pod-shared/cleaning-network.conf"
    
    exec ironic-conductor \
          --config-file /etc/ironic/ironic.conf \
          --config-file /tmp/pod-shared/conductor-local-ip.conf \
          ${OPTIONS}
    
  ironic-conductor-init.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
    if [ "x" == "x${PROVISIONER_INTERFACE}" ]; then
      echo "Provisioner interface is not set"
      exit 1
    fi
    
    function net_pxe_addr {
     ip addr | awk "/inet / && /${PROVISIONER_INTERFACE}/{print \$2; exit }"
    }
    function net_pxe_ip {
     echo $(net_pxe_addr) | awk -F '/' '{ print $1; exit }'
    }
    PXE_IP=$(net_pxe_ip)
    
    if [ "x" == "x${PXE_IP}" ]; then
      echo "Could not find IP for pxe to bind to"
      exit 1
    fi
    
    tee /tmp/pod-shared/conductor-local-ip.conf << EOF
    [DEFAULT]
    
    # IP address of this host. If unset, will determine the IP
    # programmatically. If unable to do so, will use "127.0.0.1".
    # (string value)
    my_ip = ${PXE_IP}
    
    [pxe]
    # IP address of ironic-conductor node's TFTP server. (string
    # value)
    tftp_server = ${PXE_IP}
    
    [deploy]
    # ironic-conductor node's HTTP server URL. Example:
    # http://192.1.2.3:8080 (string value)
    # from .deploy.ironic.http_url
    http_url = http://${PXE_IP}:8080
    EOF
    
  ironic-conductor-pxe.sh: |
    #!/bin/bash
    
    
    
    set -ex
    function net_pxe_addr {
     ip addr | awk "/inet / && /${PROVISIONER_INTERFACE}/{print \$2; exit }"
    }
    function net_pxe_ip {
     echo $(net_pxe_addr) | awk -F '/' '{ print $1; exit }'
    }
    PXE_IP=$(net_pxe_ip)
    
    if [ "x" == "x${PXE_IP}" ]; then
      echo "Could not find IP for pxe to bind to"
      exit 1
    fi
    
    ln -s /var/lib/openstack-helm/tftpboot /tftpboot
    exec /usr/sbin/in.tftpd \
      --verbose \
      --foreground \
      --user root \
      --address ${PXE_IP}:69 \
      --map-file /tftp-map-file /tftpboot
    
  ironic-conductor-pxe-init.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
    . /etc/os-release
    HOST_OS=${HOST_OS:="${ID}"}
    FILEPATH=${FILEPATH:-/usr/lib/ipxe}
    
    if [ "x$ID" == "xubuntu" ]; then
      #NOTE(portdirect): this works around a limitation in Kolla images
      if ! dpkg -l ipxe; then
        apt-get update
        apt-get install ipxe -y
      fi
    
      FILEPATH=/usr/lib/ipxe
    
    elif [ "x$ID" == "xcentos" ]; then
    
      if ! yum list installed ipxe-bootimgs >/dev/null 2>&1; then
        yum update --nogpgcheck -y
        yum install ipxe-bootimgs syslinux-tftpboot --nogpgcheck -y
      fi
    
      FILEPATH=/usr/share/ipxe
    
    fi
    
    mkdir -p /var/lib/openstack-helm/tftpboot
    mkdir -p /var/lib/openstack-helm/tftpboot/master_images
    
    for FILE in undionly.kpxe ipxe.efi pxelinux.0; do
      if [ -f /usr/lib/ipxe/$FILE ]; then
        cp -v /usr/lib/ipxe/$FILE /var/lib/openstack-helm/tftpboot
      fi
    
      # ipxe and pxe support for CentOS
      if [ "x$ID" == "xcentos" ]; then
        if [ -f /var/lib/tftpboot/$FILE ]; then
          cp -v /var/lib/tftpboot/$FILE /var/lib/openstack-helm/tftpboot
        fi
        if [ -f /usr/share/ipxe/$FILE ]; then
          cp -v /usr/share/ipxe/$FILE /var/lib/openstack-helm/tftpboot
        fi
      fi
    done
    
  ironic-conductor-http.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
    mkdir -p /var/lib/openstack-helm/httpboot
    cp -v /tmp/pod-shared/nginx.conf /etc/nginx/nginx.conf
    exec nginx -g 'daemon off;'
    
  ironic-conductor-http-init.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
    if [ "x" == "x${PROVISIONER_INTERFACE}" ]; then
      echo "Provisioner interface is not set"
      exit 1
    fi
    
    function net_pxe_addr {
     ip addr | awk "/inet / && /${PROVISIONER_INTERFACE}/{print \$2; exit }"
    }
    function net_pxe_ip {
     echo $(net_pxe_addr) | awk -F '/' '{ print $1; exit }'
    }
    PXE_IP=$(net_pxe_ip)
    
    if [ "x" == "x${PXE_IP}" ]; then
      echo "Could not find IP for pxe to bind to"
      exit 1
    fi
    
    sed "s|OSH_PXE_IP|${PXE_IP}|g" /etc/nginx/nginx.conf > /tmp/pod-shared/nginx.conf
    
  rabbit-init.sh: |    
    #!/bin/bash
    set -e
    # Extract connection details
    RABBIT_HOSTNAME=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $2}' | \
      awk -F'[:/]' '{print $1}')
    RABBIT_PORT=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $2}' | \
      awk -F'[:/]' '{print $2}')
    
    # Extract Admin User creadential
    RABBITMQ_ADMIN_USERNAME=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $4}')
    RABBITMQ_ADMIN_PASSWORD=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $5}')
    
    # Extract User creadential
    RABBITMQ_USERNAME=$(echo "${RABBITMQ_USER_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $4}')
    RABBITMQ_PASSWORD=$(echo "${RABBITMQ_USER_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $5}')
    
    # Extract User vHost
    RABBITMQ_VHOST=$(echo "${RABBITMQ_USER_CONNECTION}" | \
      awk -F'[@]' '{print $2}' | \
      awk -F'[:/]' '{print $3}')
    # Resolve vHost to / if no value is set
    RABBITMQ_VHOST="${RABBITMQ_VHOST:-/}"
    
    function rabbitmqadmin_cli () {
      rabbitmqadmin \
        --host="${RABBIT_HOSTNAME}" \
        --port="${RABBIT_PORT}" \
        --username="${RABBITMQ_ADMIN_USERNAME}" \
        --password="${RABBITMQ_ADMIN_PASSWORD}" \
        ${@}
    }
    
    echo "Managing: User: ${RABBITMQ_USERNAME}"
    rabbitmqadmin_cli \
      declare user \
      name="${RABBITMQ_USERNAME}" \
      password="${RABBITMQ_PASSWORD}" \
      tags="user"
    
    if [ "${RABBITMQ_VHOST}" != "/" ]
    then
      echo "Managing: vHost: ${RABBITMQ_VHOST}"
      rabbitmqadmin_cli \
        declare vhost \
        name="${RABBITMQ_VHOST}"
    else
      echo "Skipping root vHost declaration: vHost: ${RABBITMQ_VHOST}"
    fi
    
    echo "Managing: Permissions: ${RABBITMQ_USERNAME} on ${RABBITMQ_VHOST}"
    rabbitmqadmin_cli \
      declare permission \
      vhost="${RABBITMQ_VHOST}" \
      user="${RABBITMQ_USERNAME}" \
      configure=".*" \
      write=".*" \
      read=".*"
    
    if [ ! -z "$RABBITMQ_AUXILIARY_CONFIGURATION" ]
    then
      echo "Applying additional configuration"
      echo "${RABBITMQ_AUXILIARY_CONFIGURATION}" > /tmp/rmq_definitions.json
      rabbitmqadmin_cli import /tmp/rmq_definitions.json
    fi
