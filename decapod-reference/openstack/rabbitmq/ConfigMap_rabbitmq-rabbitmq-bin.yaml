# Source: rabbitmq/templates/configmap-bin.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "rabbitmq-rabbitmq-bin"
data:
  rabbitmq-test.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
    # Extract connection details
    RABBIT_HOSTNAME=`echo $RABBITMQ_ADMIN_CONNECTION | awk -F'[@]' '{print $2}' \
      | awk -F'[:/]' '{print $1}'`
    RABBIT_PORT=`echo $RABBITMQ_ADMIN_CONNECTION | awk -F'[@]' '{print $2}' \
      | awk -F'[:/]' '{print $2}'`
    
    set +x
    # Extract Admin User creadential
    RABBITMQ_ADMIN_USERNAME=`echo $RABBITMQ_ADMIN_CONNECTION | awk -F'[@]' '{print $1}' \
      | awk -F'[//:]' '{print $4}'`
    RABBITMQ_ADMIN_PASSWORD=`echo $RABBITMQ_ADMIN_CONNECTION | awk -F'[@]' '{print $1}' \
      | awk -F'[//:]' '{print $5}'`
    set -x
    
    function rabbitmqadmin_authed () {
      set +x
      rabbitmqadmin \
        --host="${RABBIT_HOSTNAME}" \
        --port="${RABBIT_PORT}" \
        --username="${RABBITMQ_ADMIN_USERNAME}" \
        --password="${RABBITMQ_ADMIN_PASSWORD}" \
        $@
      set -x
    }
    
    function rabbit_check_node_count () {
      echo "Checking node count "
      NODES_IN_CLUSTER=$(rabbitmqadmin_authed list nodes -f bash | wc -w)
      if [ "$NODES_IN_CLUSTER" -eq "$RABBIT_REPLICA_COUNT" ]; then
        echo "Number of nodes in cluster ($NODES_IN_CLUSTER) match number of desired pods ($NODES_IN_CLUSTER)"
      else
        echo "Number of nodes in cluster ($NODES_IN_CLUSTER) does not match number of desired pods ($RABBIT_REPLICA_COUNT)"
        exit 1
      fi
    }
    # Check node count
    rabbit_check_node_count
    
    function rabbit_find_partitions () {
      NODE_INFO=$(mktemp)
      rabbitmqadmin_authed list nodes -f pretty_json | tee "${NODE_INFO}"
      cat "${NODE_INFO}" | python -c "
    import json, sys, traceback
    print('Checking cluster partitions')
    obj=json.load(sys.stdin)
    for num, node in enumerate(obj):
      try:
        partition = node['partitions']
        if partition:
          raise Exception('cluster partition found: %s' % partition)
      except KeyError:
        print('Error: partition key not found for node %s' % node)
    print('No cluster partitions found')
      "
      rm -vf "${NODE_INFO}"
    }
    rabbit_find_partitions
    
    function rabbit_check_users_match () {
      echo "Checking users match on all nodes"
      NODES=$(rabbitmqadmin_authed list nodes -f bash)
      USER_LIST=$(mktemp --directory)
      echo "Found the following nodes: ${NODES}"
      for NODE in ${NODES}; do
        echo "Checking Node: ${NODE#*@}"
        rabbitmqadmin_authed list users -f bash > ${USER_LIST}/${NODE#*@}
      done
      cd ${USER_LIST}; diff -q --from-file $(ls ${USER_LIST})
      echo "User lists match for all nodes"
    }
    # Check users match on all nodes
    rabbit_check_users_match
    
  rabbitmq-liveness.sh: |
    #!/usr/bin/env bash
    
    
    
    set -e
    
    if [ -f /tmp/rabbit-disable-liveness-probe ]; then
       exit 0
    else
       timeout 5 bash -c "true &>/dev/null </dev/tcp/${MY_POD_IP}/${PORT_AMPQ}"
       exec rabbitmqctl status
    fi
    
  rabbitmq-readiness.sh: |
    #!/usr/bin/env bash
    
    
    
    set -e
    
    if [ -f /tmp/rabbit-disable-readiness ]; then
       exit 1
    else
       exec rabbitmqctl status
    fi
    
  rabbitmq-start.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
    function check_if_open () {
      HOST=$1
      PORT=$2
      timeout 10 bash -c "true &>/dev/null </dev/tcp/${HOST}/${PORT}"
    }
    
    function check_rabbit_node_health () {
      CLUSTER_SEED_NAME=$1
      rabbitmq-diagnostics node_health_check -n "${CLUSTER_SEED_NAME}" -t 10 &>/dev/null
    }
    
    get_node_name () {
      TARGET_POD=$1
      POD_NAME_PREFIX="$(echo "${MY_POD_NAME}" | awk 'BEGIN{FS=OFS="-"}{NF--; print}')"
      echo "${RABBITMQ_NODENAME}" | awk -F "@${MY_POD_NAME}." "{ print \$1 \"@${POD_NAME_PREFIX}-${TARGET_POD}.\" \$2 }"
    }
    
    function check_rabbit_node_ready () {
      TARGET_POD=$1
      CLUSTER_SEED_NAME="$(get_node_name ${TARGET_POD})"
      CLUSTER_SEED_HOST="$(echo "${CLUSTER_SEED_NAME}" | awk -F '@' '{ print $NF }')"
      check_rabbit_node_health "${CLUSTER_SEED_NAME}" && \
      check_if_open "${CLUSTER_SEED_HOST}" "${PORT_HTTP}" && \
      check_if_open "${CLUSTER_SEED_HOST}" "${PORT_AMPQ}" && \
      check_if_open "${CLUSTER_SEED_HOST}" "${PORT_CLUSTERING}"
    }
    
    POD_INCREMENT=$(echo "${MY_POD_NAME}" | awk -F '-' '{print $NF}')
    if ! [ "${POD_INCREMENT}" -eq "0" ] && ! [ -d "/var/lib/rabbitmq/mnesia" ] ; then
      echo 'This is not the 1st rabbit pod & has not been initialised'
      # disable liveness probe as it may take some time for the pod to come online.
      touch /tmp/rabbit-disable-liveness-probe
      POD_NAME_PREFIX="$(echo "${MY_POD_NAME}" | awk 'BEGIN{FS=OFS="-"}{NF--; print}')"
      for TARGET_POD in $(seq 0 +1 $((POD_INCREMENT - 1 ))); do
        END=$(($(date +%s) + 900))
        while ! check_rabbit_node_ready "${TARGET_POD}"; do
          sleep 5
          if [ "$(date +%s)" -gt "$END" ]; then
            echo "RabbitMQ pod ${TARGET_POD} not ready in time"
            exit 1
          fi
        done
      done
    
      function reset_rabbit () {
        rabbitmqctl shutdown || true
        find /var/lib/rabbitmq/* ! -name 'definitions.json' ! -name '.erlang.cookie' -exec rm -rf {} +
        exit 1
      }
    
      # Start RabbitMQ, but disable readiness from being reported so the pod is not
      # marked as up prematurely.
      touch /tmp/rabbit-disable-readiness
      rabbitmq-server &
    
      # Wait for server to start, and reset if it does not
      END=$(($(date +%s) + 180))
      while ! rabbitmqctl -q cluster_status; do
          sleep 5
          NOW=$(date +%s)
          [ $NOW -gt $END ] && reset_rabbit
      done
    
      # Wait for server to join cluster, reset if it does not
      POD_INCREMENT=$(echo "${MY_POD_NAME}" | awk -F '-' '{print $NF}')
      END=$(($(date +%s) + 180))
      while ! rabbitmqctl -l --node $(get_node_name 0) -q cluster_status | grep -q "$(get_node_name ${POD_INCREMENT})"; do
        sleep 5
        NOW=$(date +%s)
        [ $NOW -gt $END ] && reset_rabbit
      done
    
      # Shutdown the inital server
      rabbitmqctl shutdown
    
      rm -fv /tmp/rabbit-disable-readiness /tmp/rabbit-disable-liveness-probe
    fi
    
    exec rabbitmq-server
    
  rabbitmq-cookie.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
    cp -vf /run/lib/rabbitmq/.erlang.cookie /var/lib/rabbitmq/.erlang.cookie
    chown "rabbitmq" /var/lib/rabbitmq/.erlang.cookie
    chmod 0600 /var/lib/rabbitmq/.erlang.cookie
    
  rabbitmq-password-hash.py: |
    #!/usr/bin/env python
    
    
    
    from __future__ import print_function
    import base64
    import json
    import os
    import hashlib
    import struct
    
    user = os.environ['RABBITMQ_ADMIN_USERNAME']
    password = os.environ['RABBITMQ_ADMIN_PASSWORD']
    output_file = os.environ['RABBITMQ_DEFINITION_FILE']
    
    salt = os.urandom(4)
    
    tmp0 = salt + password.encode('utf-8')
    
    tmp1 = hashlib.sha512(tmp0).digest()
    
    salted_hash = salt + tmp1
    
    pass_hash = base64.b64encode(salted_hash)
    
    output = {
        "users": [{
            "name": user,
            "password_hash": pass_hash.decode("utf-8"),
            "hashing_algorithm": "rabbit_password_hashing_sha512",
            "tags": "administrator"
        }]
    }
    with open(output_file, 'w') as f:
        f.write(json.dumps(output))
        f.close()
    
  rabbitmq-wait-for-cluster.sh: |
    #!/bin/bash
    
    
    
    set -e
    
    # Extract connection details
    RABBIT_HOSTNAME=`echo $RABBITMQ_ADMIN_CONNECTION | awk -F'[@]' '{print $2}' \
      | awk -F'[:/]' '{print $1}'`
    RABBIT_PORT=`echo $RABBITMQ_ADMIN_CONNECTION | awk -F'[@]' '{print $2}' \
      | awk -F'[:/]' '{print $2}'`
    
    # Extract Admin User creadential
    RABBITMQ_ADMIN_USERNAME=`echo $RABBITMQ_ADMIN_CONNECTION | awk -F'[@]' '{print $1}' \
      | awk -F'[//:]' '{print $4}'`
    RABBITMQ_ADMIN_PASSWORD=`echo $RABBITMQ_ADMIN_CONNECTION | awk -F'[@]' '{print $1}' \
      | awk -F'[//:]' '{print $5}'`
    
    set -ex
    
    function rabbitmqadmin_authed () {
      set +x
      rabbitmqadmin \
        --host="${RABBIT_HOSTNAME}" \
        --port="${RABBIT_PORT}" \
        --username="${RABBITMQ_ADMIN_USERNAME}" \
        --password="${RABBITMQ_ADMIN_PASSWORD}" \
        $@
      set -x
    }
    
    function active_rabbit_nodes () {
      rabbitmqadmin_authed list nodes -f bash | wc -w
    }
    
    until test "$(active_rabbit_nodes)" -ge "$RABBIT_REPLICA_COUNT"; do
        echo "Waiting for number of nodes in cluster to meet or exceed number of desired pods ($RABBIT_REPLICA_COUNT)"
        sleep 10
    done
    
    function sorted_node_list () {
      rabbitmqadmin_authed list nodes -f bash | tr ' ' '\n' | sort | tr '\n' ' '
    }
    
    if test "$(active_rabbit_nodes)" -gt "$RABBIT_REPLICA_COUNT"; then
        echo "There are more nodes registed in the cluster than desired, pruning the cluster"
        PRIMARY_NODE="$(sorted_node_list | awk '{ print $1; exit }')"
        until rabbitmqctl -l -n "${PRIMARY_NODE}" cluster_status >/dev/null 2>&1 ; do
          echo "Waiting for primary node to return cluster status"
          sleep 10
        done
        echo "Current cluster:"
        rabbitmqctl -l -n "${PRIMARY_NODE}" cluster_status
        NODES_TO_REMOVE="$(sorted_node_list | awk "{print substr(\$0, index(\$0,\$$((RABBIT_REPLICA_COUNT+1))))}")"
        for NODE in ${NODES_TO_REMOVE}; do
          rabbitmqctl -l -n "${NODE}" stop_app || true
          rabbitmqctl -l -n "${PRIMARY_NODE}" forget_cluster_node "${NODE}"
        done
        echo "Updated cluster:"
        rabbitmqctl -l -n "${PRIMARY_NODE}" cluster_status
    fi
